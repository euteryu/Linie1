# game_logic/player.py
from typing import List, Dict, Tuple, Optional
from .enums import PlayerState # Use relative import
from .tile import TileType # Use relative import
from .cards import LineCard, RouteCard # Use relative import

class Player:
    def __init__(self, player_id: int): # ... implementation ...
        self.player_id = player_id; self.hand: List[TileType] = []; self.line_card: Optional[LineCard] = None; self.route_card: Optional[RouteCard] = None; self.player_state: PlayerState = PlayerState.LAYING_TRACK; self.streetcar_position: Optional[Tuple[int, int]] = None; self.validated_route: Optional[List[Tuple[int, int]]] = None; self.current_route_target_index: int = 0
    def __repr__(self) -> str: # ... implementation ...
        route_len = len(self.validated_route) if self.validated_route else 0; return (f"Player {self.player_id} (State: {self.player_state.name}, Hand: {len(self.hand)}, RouteIdx: {self.current_route_target_index}/{route_len})")
    def to_dict(self) -> Dict: # ... implementation ...
        hand_data = [tile.name for tile in self.hand]; line_card_data = self.line_card.line_number if self.line_card else None; # ... rest of implementation ...
        route_card_data = { "stops": self.route_card.stops, "variant": self.route_card.variant_index } if self.route_card else None; # ... rest of implementation ...
        route_path_data = [list(coord) for coord in self.validated_route] if self.validated_route else None; # ... rest of implementation ...
        return {"player_id": self.player_id, "hand": hand_data, "line_card": line_card_data, "route_card": route_card_data, "player_state": self.player_state.name, "streetcar_position": list(self.streetcar_position) if self.streetcar_position else None, "validated_route": route_path_data, "current_route_target_index": self.current_route_target_index,}
    @staticmethod
    def from_dict(data: Dict, tile_types: Dict[str, 'TileType']) -> 'Player': # ... implementation ...
        player_id = data.get("player_id", -1); # ... rest of implementation ...
        player = Player(player_id); player.hand = [tile_types[name] for name in data.get("hand", []) if name in tile_types]; # ... rest of implementation ...
        lc_num = data.get("line_card"); player.line_card = LineCard(lc_num) if lc_num is not None else None; # ... rest of implementation ...
        rc_data = data.get("route_card"); # ... rest of implementation ...
        if rc_data and isinstance(rc_data, dict): player.route_card = RouteCard(rc_data.get("stops",[]), rc_data.get("variant", 0))
        try: player.player_state = PlayerState[data.get("player_state", "LAYING_TRACK")]
        except KeyError: player.player_state = PlayerState.LAYING_TRACK
        pos_list = data.get("streetcar_position"); player.streetcar_position = tuple(pos_list) if isinstance(pos_list, list) and len(pos_list) == 2 else None; # ... rest of implementation ...
        route_list = data.get("validated_route"); player.validated_route = [tuple(coord) for coord in route_list if isinstance(coord, list) and len(coord) == 2] if route_list else None; # ... rest of implementation ...
        player.current_route_target_index = data.get("current_route_target_index", 0); return player
